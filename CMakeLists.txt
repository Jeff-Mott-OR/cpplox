cmake_minimum_required(VERSION 3.21)
project(Project)

option(DEPS_ONLY "Fetch dependencies only" FALSE)
option(ENABLE_TESTING "Build and run tests" FALSE)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

include(FetchContent)
set(FETCHCONTENT_QUIET OFF)

set(BOOST_INCLUDE_LIBRARIES algorithm convert process program_options test)
FetchContent_Declare(
    Boost
    GIT_REPOSITORY https://github.com/boostorg/boost.git
    GIT_TAG boost-1.80.0
    GIT_SHALLOW ON
)

set(BENCHMARK_ENABLE_TESTING FALSE)
FetchContent_Declare(
    Google_Benchmark
    GIT_REPOSITORY https://github.com/google/benchmark.git
    GIT_TAG v1.7.1
    GIT_SHALLOW ON
)

FetchContent_Declare(
    Microsoft_GSL
    GIT_REPOSITORY https://github.com/microsoft/GSL
    GIT_TAG v4.0.0
    GIT_SHALLOW ON
)

FetchContent_MakeAvailable(Boost Google_Benchmark Microsoft_GSL)

# Mark Boost_Process as system include to avoid clang warnings from Boost headers.
set_target_properties(
    boost_process
    PROPERTIES INTERFACE_SYSTEM_INCLUDE_DIRECTORIES
    $<TARGET_PROPERTY:boost_process,INTERFACE_INCLUDE_DIRECTORIES>
)

if(NOT DEPS_ONLY)
    set(cpploxbc_sources
        "${CMAKE_CURRENT_SOURCE_DIR}/src/chunk.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/compiler.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/lox.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/memory.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/object.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/scanner.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/value.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/src/vm.cpp"
    )

    add_library(cpploxbc_lib STATIC ${cpploxbc_sources})
    target_link_libraries(cpploxbc_lib PUBLIC Boost::algorithm Boost::convert Microsoft.GSL::GSL)
    target_compile_features(cpploxbc_lib PUBLIC cxx_std_20)
    target_compile_options(cpploxbc_lib PUBLIC -Wall -Wextra -Werror)

    add_executable(cpploxbc src/main.cpp)
    target_link_libraries(cpploxbc PUBLIC cpploxbc_lib Boost::program_options)
    set_property(TARGET cpploxbc PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE) # LTO

    if(ENABLE_TESTING)
        enable_testing()

        add_test(
            NAME cppcheck
            COMMAND cppcheck --error-exitcode=1 "${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp" ${cpploxbc_sources}
        )

        # Valgrind bug does not read DWARF5 generated by clang14 (https://bugs.kde.org/show_bug.cgi?id=452758).
        if(NOT CMAKE_BUILD_TYPE STREQUAL Debug)
            find_program(VALGRIND_COMMAND valgrind)
            message(STATUS "Check for valgrind: ${VALGRIND_COMMAND}")
            if(NOT VALGRIND_COMMAND STREQUAL "VALGRIND_COMMAND-NOTFOUND")
                add_test(
                    NAME valgrind_test
                    COMMAND "${VALGRIND_COMMAND}" --error-exitcode=1 --leak-check=yes
                        "$<TARGET_FILE:cpploxbc>" "${CMAKE_CURRENT_SOURCE_DIR}/test/lox/function.lox"
                )
            endif()
        endif()

        add_executable(scanner_test test/scanner-test.cpp)
        target_link_libraries(scanner_test PUBLIC cpploxbc_lib Boost::unit_test_framework)
        add_test(NAME scanner_test COMMAND scanner_test)

        add_executable(compiler_test test/compiler-test.cpp)
        target_link_libraries(compiler_test PUBLIC cpploxbc_lib Boost::unit_test_framework)
        add_test(NAME compiler_test COMMAND compiler_test)

        add_executable(vm_test test/vm-test.cpp)
        target_link_libraries(vm_test PUBLIC cpploxbc_lib Boost::unit_test_framework)
        add_test(NAME vm_test COMMAND vm_test)

        add_executable(memory_test test/memory-test.cpp)
        target_link_libraries(memory_test PUBLIC cpploxbc_lib Boost::unit_test_framework)
        add_test(NAME memory_test COMMAND memory_test)

        add_executable(cli_test test/cli-test.cpp)
        target_link_libraries(cli_test PUBLIC Boost::process Boost::unit_test_framework)
        add_test(NAME cli_test COMMAND cli_test)

        add_executable(bench_test test/bench-test.cpp)
        target_link_libraries(bench_test PUBLIC cpploxbc_lib benchmark::benchmark Boost::process)
    endif()
endif()
