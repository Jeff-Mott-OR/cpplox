--- deferred_heap.h
+++ deferred_heap.h
@@ -423,4 +423,4 @@
 	class deferred_ptr : public deferred_heap::deferred_ptr_void {
 		deferred_ptr(deferred_heap* heap, T* p)
-			: deferred_ptr_void{ heap, p }
+			: deferred_ptr_void{ heap, (void*)p }
 		{ }
@@ -477,5 +477,10 @@
 			return *this;
 		}
+
+		template<class U>
+		deferred_ptr<U> static_pointer_cast() const {
+			return{ get_heap(), static_cast<U*>(get()) };
+		}

 		//	Aliasing conversion: Type-safely forming a pointer to data member of T of type U.
 		//	Thanks to Casey Carter and Jon Caves for helping get this incantation right.
@@ -653,7 +653,12 @@
 			return get() - that.get();
 		}
 	};
+
+	template<class T, class U>
+	deferred_ptr<T> static_pointer_cast(const deferred_ptr<U>& r) {
+		return r.template static_pointer_cast<T>();
+	}

 	//	Specialize void just to get rid of the void& return from operator*

 	template<>
